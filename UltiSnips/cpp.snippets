# vim: filetype=snippets foldmethod=marker

priority -50

# => global ------------------------------------------------------------------------------------------------------ {{{1

# We want to overwrite everything in parent ft.

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]
endglobal

# => preprocessor ------------------------------------------------------------------------------------------------ {{{1

snippet inc "include <>"
#include <${1:string}>
endsnippet

snippet incl "include local"
#include "${1:`!p snip.rv = snip.basename or "name"`.hpp}"
endsnippet

snippet hpp "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif
endsnippet

# => Loops ------------------------------------------------------------------------------------------------------- {{{1

snippet for "Loops: foreach"
for (auto& ${1:it}: ${2:container}) {
	${VISUAL}$0
}
endsnippet

snippet fori "Loops: for i"
for (size_t ${1:i} = 0; $1 < ${2:count}; ++$1) {
	${3}
}
endsnippet

snippet forit "iterate"
for (auto ${1:it} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

# => Error checking ---------------------------------------------------------------------------------------------- {{{1

snippet try "Error checking: try"
try {
} catch(${1}) {
}
endsnippet

# => cast -------------------------------------------------------------------------------------------------------- {{{1

snippet cca "const_cast"
const_cast<${1}>(${2})
endsnippet

snippet sca "static_cast"
static_cast<${1}>(${2})
endsnippet

snippet rca "reinterpret_cast"
reinterpret_cast<${1}>(${2})
endsnippet

snippet dca "dynamic_cast"
dynamic_cast<${1}>(${2})
endsnippet

# => namespace --------------------------------------------------------------------------------------------------- {{{1

snippet ns "namespace .. (namespace)"
namespace ${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}
endsnippet

snippet nsa "namespace anonymous .. (namespace)"
namespace {
	${VISUAL}$0
}
endsnippet

# => function ---------------------------------------------------------------------------------------------------- {{{1

snippet fun "function"
${3:void} auto ${1:name}(${2})
{
	${0}
}
endsnippet

snippet funa "auto function"
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
}
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet ld "lamda (one line)"
[${1}](${2}){${3}}
endsnippet

snippet ldd "lambda (multi-line)"
[${1}](${2}){
	${3}
}
endsnippet

# => class ------------------------------------------------------------------------------------------------------- {{{1

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	virtual ~${1/(\w+).*/$1/}() = default;
	${1/(\w+).*/$1/}(${2});

private:
	${3};
};
endsnippet

snippet mfd "member function declaration"
${3:void} ${1:memberFunction}(${2});
endsnippet

snippet mfi "member function implementation"
${4:void} ${1:`!p snip.rv = snip.basename or "name"`}::${2:memberFunction}(${3}) {
	${0}
}
endsnippet

# => template ---------------------------------------------------------------------------------------------------- {{{1

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# => std --------------------------------------------------------------------------------------------------------- {{{1

snippet cout "std::cout"
std::cout << ${1} << std::endl;
endsnippet

snippet cin "std::cin"
std::cin >> ${1};
endsnippet

snippet array "std::array"
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet vector "std::vector"
std::vector<${1:T}> ${2};
endsnippet

snippet deque "std::deque"
std::deque<${1:T}> ${2};
endsnippet

snippet list "std::list"
std::list<${1:T}> ${2};
endsnippet

snippet set "std::set"
std::set<${1:T}> ${2};
endsnippet

snippet map "std::map"
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "std::multiset"
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "std::multimap"
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "std::unordered_set"
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "std::unordered_map"
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "std::unordered_multiset"
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "std::unordered_multimap"
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack "std::stack"
std::stack<${1:T}> ${2};
endsnippet

snippet queue "std::queue"
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue "std::priority_queue"
std::priority_queue<${1:T}> ${2};
endsnippet

snippet ms "std::make_shared"
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet

snippet mu "std::make_unique"
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet
