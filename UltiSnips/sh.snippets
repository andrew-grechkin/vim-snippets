# vim: ft=snippets

snippet #! "shebang" b
#!/usr/bin/env bash

set -Eeuo pipefail
endsnippet

snippet if "if ... then" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet elif "elif .. (elif)" b
elif [[ ${1:condition} ]]; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( ${1:I} = 0; $1 < ${2:10}; $1++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:I} in ${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet while "while ... (done)" b
while [[ ${1:condition} ]]; do
	${0:${VISUAL}}
done
endsnippet

snippet until "until ... (done)" b
until [[ ${1:condition} ]]; do
	${0:${VISUAL}}
done
endsnippet

snippet case "case .. esac (case)" b
case ${1:word} in
	${2:pattern})
		${0};;
esac
endsnippet

snippet fun
function ${1:name}() {
	${0:# TODO: body...}
}
endsnippet

snippet date
DATETIME=$(date --rfc-3339=ns)
endsnippet

snippet sdir
SCRIPT=$(realpath -s "$0")
SDIR=$(dirname "$SCRIPT")
endsnippet

snippet root
[ \$(id -u) -ne 0 ] && exec sudo "\$@"
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet temp "Tempfile" b
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}
endsnippet

# getopt
snippet go
	while getopts '${1:o}' ${2:opts}
	do
		case $$2 in
		${3:o0})
			${0:#staments};;
		esac
	done
endsnippet

snippet getopt
	__ScriptVersion="${1:version}"

	#===  FUNCTION  ================================================================
	#         NAME:  usage
	#  DESCRIPTION:  Display usage information.
	#===============================================================================
	function usage ()
	{
		echo "Usage :  $${0:0} [options] [--]

	    Options:
	    -h|help       Display this message
	    -v|version    Display script version"

	}    # ----------  end of function usage  ----------

	#-----------------------------------------------------------------------
	#  Handle command line arguments
	#-----------------------------------------------------------------------

	while getopts ":hv" opt
	do
	  case $opt in

		h|help     )  usage; exit 0   ;;

		v|version  )  echo "$${0:0} -- Version $__ScriptVersion"; exit 0   ;;

		* )  echo -e "\n  Option does not exist : $OPTARG\n"
			  usage; exit 1   ;;

	  esac    # --- end of case ---
	done
	shift $(($OPTIND-1))
endsnippet
